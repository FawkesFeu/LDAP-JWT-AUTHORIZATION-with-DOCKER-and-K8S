apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: ldap-jwt-app
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: ldap-jwt-frontend:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: app-config
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 20
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      initContainers:
      - name: wait-for-backend
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z backend-service 8000; do
            echo "Waiting for backend service..."
            sleep 5
          done
          echo "Backend service is ready!"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: ldap-jwt-app
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-nodeport
  namespace: ldap-jwt-app
  labels:
    app: frontend-nodeport
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30080
    protocol: TCP 